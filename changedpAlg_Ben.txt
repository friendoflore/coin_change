Algorithm 3: changedp (Ben)

adapted from: http://interactivepython.org/runestone/static/pythonds/Recursion/DynamicProgramming.html

def recDC(coinValueList,change,knownResults):
   minCoins = change
   if change in coinValueList:
      knownResults[change] = 1
      return 1
   elif knownResults[change] > 0:
      return knownResults[change]
   else:
       for i in [c for c in coinValueList if c <= change]:
         numCoins = 1 + recDC(coinValueList, change-i,
                              knownResults)
         if numCoins < minCoins:
            minCoins = numCoins
            knownResults[change] = minCoins
   return minCoins

   
   
   
****adaptation to also memoize the number of each coin denomination
needed for the solutions:

changedp(change, V)

    declare array T with T[0] = 0
    // This will store minCoins solution for each amount of change i.
    declare 2-d array C
    // This will store an array of denominations as the solution
    // for each amount of change i.
    
    m = changedpInternal(change, V, T, C)
    
    return (m, C[change])

changedpInternal(change, V, T, C)   // V, T, C passed by reference
    
    minCoins = change
    array D, size V, 0-filled 
    
    if (change == 0)
        // T[0] = 0
        C[0] = D
        return 0
    else if (change == 1)
        D[0] = 1    // array [1,0,0,...,0]
        C[1] = D
        return 1
    else if change < T.length // solution for change
                              // should be in table T
        return T[change]
    
    for each index d in array V
        if (change == V[d]) // V[d] is a coin's denomination or value
            D[d] = 1
            C[change] = D
            return 1
    
    from i=0 to V[i] < change
        numCoins = 1 + changedpInternal(V, change - V[i], T, C)
        if (numCoins < minCoins)
            minCoins = numCoins
            D = C[change - V[i]]     // (re)assign D
            D[i] = D[i] + 1
    
    return minCoins
    