I. File list
------------
changeslow.cp				Slow algorithm implementation
changegreedy.cp				Greedy algorithm implementation
changedp.cp 				Dynamic programming algorithm implementation
README					This file


II. Program instructions
------------------------

A. Program Overview

Given an array V of integers of the form

	[a_0, a_1, a_2, ... , a_n]

and an integer A, each program returns an array [b_0, b_1, b_2, ... b_n] and an
integer B. Each program treats the array V to be available coin denominations, 
while A is the value for which change must be made using the coin 
denominations.

Each program accepts input from a file, the name of which is provided by the 
user when the program is executed. The input file should contain test cases of 
varying coin denominations and A values for which change is to be made. Input
specifications are detailed below.


B. Compiling and running the programs

To compile the three programs, I will use "slow", "greedy", and "dp" as the
respective object file placeholder names of the corresponding compiled source 
file.

From the command line, while in the directory of the C++ files, enter the 
following:

	"g++ changeslow.cp -o slow"
	"g++ changegreedy.cp -o greedy"
	"g++ changedp.cp -o dp"

In running the program, an input file must be provided as a command line 
argument. The input file must be a ".txt" file, otherwise behavior is 
undefined. If no input file name argument is provided, an error is printed to 
the screen and the programs exit. "Sample.txt" will be the placeholder name of 
the input file below.

Say that "Sample.txt" contains appropriately formatted sample coin 
denominations and A values for which change will be made. To run each 
algorithm, type the following:

	"./slow Sample.txt"
	"./greedy Sample.txt"
	"./dp Sample.txt"

The above will run each algorithm over the data set provided in the sample 
.txt file.

C. Program Input

The file input must be formatted as follows:

	[a_0, a_1, a_2, ..., a_i]
	A_0
	[a'_0, a'_1, a'_2, ..., a'_j]
	A_1
	.
	.
	.
	[a'' '_0, a'' '_1, a'' '_2, ..., a'' '_n]
	A_m

where i, j, ..., n is the number of coins in that coin denomination and m is
the number of sample problems provided in the sample file.

For example, "Sample.txt" could be the following:

	[1, 2, 5, 10, 25]
	101
	[1, 3, 6, 13]
	5
	[1, 20, 40, 63, 137]
	2009

Each program reads in the the problem sets from the provided file and runs
their respective algorithms on them.

D. Program Output

Each program has two forms of output - one set of information to the console 
and another set of information to a .txt file. If the provided input file is 
"Sample.txt", then the output file that each program creates will be called 
"Samplechange.txt". 

To the console, each program outputs the value of A for which the algorithm is 
running along with the time (in seconds) that the algorithm took to complete. 

The output to the console will look as follows:

	The algorithm for change amount [A] ran in [t] seconds.

The output to the file will look as follows:

	[b_0, b_1, b_2, ..., b_n]
	B

where the array is the number of each corresponding coin denomination needed to
make the change of the provided A value. B is the minimum number of coins in 
the change calculation for each algorithm.


III. Authors
----------
These programs were written for CS 325 at Oregon State University, Project 
Group 14, Fall 2015.

Benjamin Olson
David Profio
Timothy Robinson
